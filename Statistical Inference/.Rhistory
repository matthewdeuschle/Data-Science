library("MASS", lib.loc="C:/Program Files/R/R-3.0.2/library")
names(galton)
data(heights)
data(galton)
galton$child
install.packages("HistData")
library("HistData", lib.loc="C:/Users/dormantroot/Documents/R/win-library/3.0")
data(galton)
data(Galton)
hist(Galton$child)
hist(Galton$parent)
# Expected values
library(UsingR); data(galton)
par(mfrow=c(1,2))
hist(galton$child,col="blue",breaks=100)
hist(galton$parent,col="blue",breaks=100)
library(manipulate)
## Using manipulate
library(manipulate)
myHist = function(mu){
hist(Galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse = mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("Imbalance = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
data(Galton)
hist(Galton$child)
hist(Galton$parent)
## Using manipulate
library(manipulate)
myHist = function(mu){
hist(Galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse = mean((Galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("Imbalance = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(manipulate)
myHist = function(mu){
hist(Galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse = mean((Galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("Imbalance = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
## The center of mass is the empirical mean
hist(galton$child,col="blue",breaks=100)
meanChild <- mean(galton$child)
lines(rep(meanChild,100),seq(0,150,length=100),col="red",lwd=5)
hist(Galton$child,col="blue",breaks=100)
meanChild <- mean(Galton$child)
lines(rep(meanChild,100),seq(0,150,length=100),col="red",lwd=5)
rep(meanChild,100)
length(Galton$child)
hist(Galton$child,col="blue",breaks=100)
meanChild = mean(Galton$child)
lines(meanChild,seq(0,150,length=100),col="red",lwd=5)
lines(meanChild,seq(0,150,length=1),col="red",lwd=5)
lines(rep(meanChild,100),seq(0,150,length=100),col="red",lwd=5)
qnorm(0.75,mean=1,sd=1)
qnorm(0.75,mean=1,sd=0)
pbeta(0.75,mean=1,sd=1)
pbeta(0.75,1,1)
round(pnorm(70, mean=80, sd=10)*100)
round(pnorm(95, mean=1100, sd=75)*100)
round(qnorm(95, mean=1100, sd=75)*100)
round(qnorm(0.95, mean=1100, sd=75)*3)
qnorm(0.95, mean=1100, sd=75)
qnorm(0.95, mean=1100, sd=75/sqrt(100))
round(pbinom(4,prob=0.5, size=6, lower.tail=FALSE)*100,1)
round(pbinom(3,prob=0.5, size=6, lower.tail=FALSE)*100,1)
round(pbinom(3,prob=0.5, size=5, lower.tail=FALSE)*100,1)
round(pnorm(.51, mean = 0.5, sd = sqrt(1 / 12 / 100), lower.tail = FALSE), 3)
round(pnorm(.51, mean = 0.5, sd = sqrt(1 / 12 / 100), lower.tail = FALSE), 3)
pnorm(0.10, mean=0.5, sd = sqrt(1 / 12 / 100))
round(pnorm(.10, mean = 0.5, sd = sqrt(1 / 12 / 100), lower.tail = FALSE), 3)
round(pnorm(.75, mean = 0.5, sd = sqrt(1 / 12 / 100), lower.tail = FALSE), 3)
round(pnorm(.25, mean = 0.5, sd = sqrt(1 / 12 / 100), lower.tail = FALSE), 3)
round(pnorm(.10, mean = 0.5, sd = sqrt(1 / 12 / 1000), lower.tail = FALSE), 3)
round(pnorm(.25, mean = 0.5, sd = sqrt(1 / 12 / 1000), lower.tail = FALSE), 3)
round(pnorm(.5, mean = 0.5, sd = sqrt(1 / 12 / 1000), lower.tail = FALSE), 3)
round(pnorm(.75, mean = 0.5, sd = sqrt(1 / 12 / 1000), lower.tail = FALSE), 3)
round(pnorm(.5, mean = 0.5, sd = sqrt(1 / 12 / 1000), lower.tail = TRUE), 3)
round(pnorm(.25, mean = 0.5, sd = sqrt(1 / 12 / 1000), lower.tail = TRUE), 3)
round(pnorm(.25, mean = 0.5, sd = sqrt(1 / 12 / 1000), lower.tail = TRUE), 3)
round(pnorm(.75, mean = 0.5, sd = sqrt(1 / 12 / 1000), lower.tail = TRUE), 3)
round(pnorm(.10, mean = 0.5, sd = sqrt(1 / 12 / 1000), lower.tail = TRUE), 3)
round(ppois(10, lambda=5 * 3)*100,1)
ppois(10, lambda=5 * 3)
pnorm(14, mean = 15, sd = 10 / sqrt(100))
pnorm(16, mean = 15, sd = 10 / sqrt(100))
round(pnorm(.15, mean = 0.5, sd = sqrt(1 / 12 / 1000), lower.tail = FALSE), 3)
round(pnorm(.30, mean = 0.5, sd = sqrt(1 / 12 / 1000), lower.tail = FALSE), 3)
round(pnorm(.03, mean = 0.5, sd = sqrt(1 / 12 / 1000), lower.tail = FALSE), 3)
round(pnorm(.08, mean = 0.5, sd = sqrt(1 / 12 / 1000), lower.tail = FALSE), 3)
pnorm(.08, mean = 0.5, sd = sqrt(1 / 12 / 1000), lower.tail = FALSE)
pnorm(.08, mean = 0.5, sd = sqrt(1 / 12 / 1000))
pnorm(.03, mean = 0.5, sd = sqrt(1 / 12 / 1000))
pnorm(.30, mean = 0.5, sd = sqrt(1 / 12 / 1000))
pnorm(.15, mean = 0.5, sd = sqrt(1 / 12 / 1000))
round(pnorm(.10, mean = 0.5, sd = sqrt(1 / 12 / 1000), lower.tail = FALSE), 3)
round(pnorm(.75, mean = 0.5, sd = sqrt(1 / 12 / 1000), lower.tail = FALSE), 3)
round(pnorm(.25, mean = 0.5, sd = sqrt(1 / 12 / 1000), lower.tail = FALSE), 3)
round(pnorm(.5, mean = 0.5, sd = sqrt(1 / 12 / 1000), lower.tail = FALSE), 3)
round(pnorm(.5, mean = 0.5, sd = sqrt(1 / 12 / 1000), lower.tail = TRUE), 3)
round(pnorm(.25, mean = 0.5, sd = sqrt(1 / 12 / 1000), lower.tail = TRUE), 3)
round(pnorm(.75, mean = 0.5, sd = sqrt(1 / 12 / 1000), lower.tail = TRUE), 3)
round(pnorm(.10, mean = 0.5, sd = sqrt(1 / 12 / 1000), lower.tail = TRUE), 3)
round(pnorm(50, mean = 45, sd = 3.2, lower.tail = TRUE), 3)
round(pnorm(50, mean = 45, sd = 3.2, lower.tail = FALSE), 3)
round(pnorm(50, mean = 45, sd = 3.2), 3)
round(pnorm(.5, mean = 0.5, sd = sqrt(1 / 12 / 1000), lower.tail = TRUE), 3)
round(pnorm(.5, mean = 0.5, sd = sqrt(1 / 12 / 1000), lower.tail = FALSE), 3)
round(pnorm(.1, mean = 0.5, sd = sqrt(1 / 12 / 1000), lower.tail = FALSE), 3)
round(pnorm(.1, mean = 0.5, sd = sqrt(1 / 12 / 1000), lower.tail = TRUE), 3)
round(pnorm(.75, mean = 0.5, sd = sqrt(1 / 12 / 1000), lower.tail = TRUE), 3)
round(pnorm(.75, mean = 0.5, sd = sqrt(1 / 12 / 1000), lower.tail = FALSE), 3)
round(pnorm(.25, mean = 0.5, sd = sqrt(1 / 12 / 1000), lower.tail = FALSE), 3)
round(pnorm(.25, mean = 0.5, sd = sqrt(1 / 12 / 1000), lower.tail = TRUE), 3)
library(datasets);
data(mtcars)
round(t.test(mtcars$mpg)$conf.int)
?t.test
a = 1100
s = 30
n = 9
error = qt(0.95,df=n-1)*s/sqrt(n)
left = a-error
right = a+error
(-2*sqrt(9))/qt(0.975, df=8)
t.test(m4,m6,var.equal=TRUE)
m4 = mtcars$mpg[mtcars$cyl == 4]
m6 = mtcars$mpg[mtcars$cyl == 6]
t.test(m4,m6,var.equal=TRUE)
(t.test(m4,m6,var.equal=TRUE))$conf.int
a = 3
s = sqrt(0.60)
n = 10
error = qt(0.95,df=n-1)*s/sqrt(n)
left = a-error
right = a+error
n1 = n2 = 9
x1 = 3
x2 = 1
s1 = 1.5
s2 = 1.8
spsq = ( (n1 - 1) * s1^2 + (n2 - 1) * s2^2) / (n1 + n2 - 2)

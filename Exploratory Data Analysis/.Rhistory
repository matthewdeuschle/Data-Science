# add the x-axis values
axis(1, at=1,labels=c("Thu"))
axis(1, at=length(data$Date)/2,labels=c("Fri"))
axis(1, at=length(data$Date),labels=c("Sat"))
# Create a line plot showing the values of the variable -'Sub_metering_2'
lines(data$Sub_metering_2,col="red",type="l",lwd=1)
# Create a line plot showing the values of the variable -'Sub_metering_3'
lines(data$Sub_metering_3,col="blue",type="l",lwd=1)
# Display the legend
legend("topright",legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
lty=1,lwd=1,col=c("black","red","blue"),
ncol=1,cex=1.5,
bty="1",
inset =c(0,0),
text.col=c("black"))
# Save to PNG file
dev.off()
###############################################################################
## plot3.R script file
###############################################################################
## This script creates a line graph representing the values of the energy
## sub metering variables (Sub_metering_1, Sub_metering_2, Sub_metering_3)
## for each day of the week, during the 1st and 2nd day of February, 2007.
## The resulting line graph is saved in the current working folder as plot3.png
###############################################################################
##-----------------------------------------------------------------------------
## Pre-requisites before running the entire script.
##
## 1) Please set your working directory (using the 'setwd' command) to the
##    location of the required file - 'household_power_consumption.txt'.
##
## 2) You should install the 'sqldf' R package
##-----------------------------------------------------------------------------
library(sqldf)  # load sqldf library
getwd()         # get your current working location
#setwd(.....)   # command to set your working directory location. Note, the directory should contain the 'household_power_consumption.txt' file
# Read only those recordings that happened on February 1st and 2nd of year 2007.
data = read.csv.sql("household_power_consumption.txt", sql="select * from file where Date=='1/2/2007' or Date=='2/2/2007' ",
sep=";", header=TRUE)
# Define the plotting device
png("plot3.png",res=55, width=480, height=480)
# Create a line plot showing the values of the variable -'Sub_metering_1'
plot(data$Sub_metering_1,type="l",lwd=1,
xaxt="n",col="black",
xlab="",ylab="Energy sub metering",
main="")
# add the x-axis values
axis(1, at=1,labels=c("Thu"))
axis(1, at=length(data$Date)/2,labels=c("Fri"))
axis(1, at=length(data$Date),labels=c("Sat"))
# Create a line plot showing the values of the variable -'Sub_metering_2'
lines(data$Sub_metering_2,col="red",type="l",lwd=1)
# Create a line plot showing the values of the variable -'Sub_metering_3'
lines(data$Sub_metering_3,col="blue",type="l",lwd=1)
# Display the legend
legend("topright",legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
lty=1,lwd=1,col=c("black","red","blue"),
ncol=1,cex=1.5,
bty="1",
inset =c(0,0),
text.col=c("black"))
# Save to PNG file
dev.off()
library(lattice)
library(datasets)
xyplot(Ozone~Wind, data=airquality)
airquality$Month
str(airquality$Month)
airquality = transform(airquality, Month=factor(Month))
xyplot(Ozone~Wind | Month, data=airquality, layout=c(5,1))
xyplot(Ozone~Wind | Month, data=airquality, layout=c(5,1))
xyplot(Ozone~Wind | Month, data=airquality, layout=c(5,1))
airquality = transform(airquality, Month=factor(Month)) # convert 'Month' to a factor variable
xyplot(Ozone~Wind | Month, data=airquality, layout=c(5,1))
set.seed(10)
x = rnorm(100)
m = rep(0:1, each=50)
y = x+f-f*x+rnorm(100, sd=0.5)
y = x+m-m*x+rnorm(100, sd=0.5)
y = x+m-m*x+rnorm(100, sd=0.5)
y = x+m-m*x+rnorm(100, sd=0.5)
xyplot(y~x | f, layout=c(2,1))
f = factor(m, labels=c("Group 1", "Group 2"))
xyplot(y~x | f, layout=c(2,1))
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
xyplot(weight ~ Time | Diet, BodyWeight)
?xyplot
library(lattice)
library(datasets)
data(airquality)
p = xyplot(Ozone~Wind | factor(Month), data=airquality)
qplot(Wind, Ozone, data=airquality)
library(ggplot2)
data(airquality)
qplot(Wind, Ozone, data=airquality)
qplot(Wind, Ozone, data=airquality, facets = .~factor(Month))
airquality = transform(airquality, Month=factor(Month))
qplot(Wind, Ozone, data=airquality, facets = .~Month
airquality = transform(airquality, Month=factor(Month))
airquality = transform(airquality, Month=factor(Month))
qplot(Wind, Ozone, data=airquality, facets = .~Month)
library(ggplot2)
g = ggplot(movies, aes(votes, rating))
print(g)
ggplot(movies, aes(votes, rating))
qplot(votes, rating, data=movies)
qplot(votes, rating, data=movies, panel=panel.loess)
qplot(votes, rating, data=movies, smooth="loess")
qplot(votes, rating, data=movies)+stats_smooth("loess")
qplot(votes, rating, data=movies)+ geom_smooth()
qplot(votes, rating, data=movies)+stats_smooth("loess")
# Read the rd file contents
setwd("F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/Exploratory Data Analysis/Week 3")
NEI = readRDS("summarySCC_PM25.rds")
SCC = readRDS("Source_Classification_Code.rds")
names(NEI)
gdf = NEI[which(NEI$fips == "24510")]
gdf = NEI[which(NEI$fips == "24510"),]
gdf = ddply(gdf, c("year"), function(x) c(TOTAL=sum(x$Emissions)))
library(plyr)
library(ggplot2)
library(gridExtra)
gdf = ddply(gdf, c("year"), function(x) c(TOTAL=sum(x$Emissions)))
View(gdf)
View(gdf)
View(gdf)
View(gdf)
plot(gdf$year,gdf$TOTAL, type = "o", ylim = c(0, max(gdf$TOTAL)), xlim=c(1998, 2010),
col="red",
xlab="Year",ylab="Total PM2.5 Emission (Tons)",
main="Total PM2.5 Emissions (in Tons) for Baltimore City from Year 1999 to 2008")
source('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/Exploratory Data Analysis/Week 3/Plot2.R', echo=TRUE)
View(gdf)
gdf = NEI[which(NEI$fips == "24510"),]
View(gdf)
View(gdf)
View(gdf)
View(gdf)
gdf = ddply(gdf, c("type","year"), function(x) c(TOTAL=sum(x$Emissions)))
View(gdf)
View(gdf)
p = ggplot(gdf, aes(x=year, y=TOTAL)) + geom_line() +
xlab("Interval") +
ylab("Average Number of Steps")
ggplot(gdf, aes(x=year, y=TOTAL)) + geom_line() +
xlab("Interval") +
ylab("Average Number of Steps")
gdf = NEI[which(NEI$fips == "24510"),]
# For the city of Baltimore, group emissions by year across all sources and find the total emission for each of the years
gdf = ddply(gdf, c("type","year"), summarise, function(x) c(TOTAL=sum(x$Emissions)))
gdf = NEI[which(NEI$fips == "24510"),]
# For the city of Baltimore, group emissions by year across all sources and find the total emission for each of the years
gdf = ddply(gdf, c("type","year"), function(x) c(TOTAL=sum(x$Emissions)))
View(gdf)
View(gdf)
ggplot(gdf, aes(x=year, y=TOTAL, colour=type)) + geom_line() +
xlab("Interval") +
ylab("Average Number of Steps")
P = ggplot(gdf, aes(x=year, y=TOTAL, colour=type)) + geom_line() +
xlab("Year") +
ylab("Total PM2.5 Emission (Tons)") +
ggtitle("Total Emission from PM2.5 in Baltimore City From Different Sources During the Year 1998-2008")
P+labs(fill="PM2.5 Emission Source Type")
P = ggplot(gdf, aes(x=year, y=TOTAL, colour=type)) + geom_line() +
xlab("Year") +
ylab("Total PM2.5 Emission (Tons)") +
ggtitle("Total Emission from PM2.5 in Baltimore City From Different Sources During the Year 1998-2008") +
scale_linetype_discrete(name = "Fancy Title")
P = ggplot(gdf, aes(x=year, y=TOTAL, colour=type)) + geom_line() +
xlab("Year") +
ylab("Total PM2.5 Emission (Tons)") +
ggtitle("Total Emission from PM2.5 in Baltimore City From Different Sources During the Year 1998-2008") +
scale_linetype_discrete(name = "Fancy Title")
ggplot(gdf, aes(x=year, y=TOTAL, colour=type)) + geom_line() +
xlab("Year") +
ylab("Total PM2.5 Emission (Tons)") +
ggtitle("Total Emission from PM2.5 in Baltimore City From Different Sources During the Year 1998-2008") +
scale_linetype_discrete(name = "Fancy Title")
P = ggplot(gdf, aes(x=year, y=TOTAL, colour=type)) + geom_line() +
xlab("Year") +
ylab("Total PM2.5 Emission (Tons)") +
ggtitle("Total Emission from PM2.5 in Baltimore City From Different Sources During the Year 1998-2008")
P = P+scale_linetype_discrete(name = "Fancy Title")
P
ggplot(gdf, aes(x=year, y=TOTAL, colour=type)) + geom_line() +
xlab("Year") +
ylab("Total PM2.5 Emission (Tons)") +
ggtitle("Total Emission from PM2.5 in Baltimore City From Different Sources During the Year 1998-2008") +
scale_colour_discrete(name = "Fancy Title")
ggplot(gdf, aes(x=year, y=TOTAL, colour=type)) + geom_line() +
xlab("Year") +
ylab("Total PM2.5 Emission (Tons)") +
ggtitle("Total Emission from PM2.5 in Baltimore City From Different Sources During the Year 1998-2008") +
scale_colour_discrete(name = "Emission Source Type")
ggplot(gdf, aes(x=year, y=TOTAL, colour=type)) + geom_line() +
xlab("Year") +
ylab("Total PM2.5 Emission (Tons)") +
ggtitle("Total Emission from PM2.5 in Baltimore City From Different Sources During the Year 1998-2008") +
scale_colour_discrete(name = "Emission /nSource Type")
ggplot(gdf, aes(x=year, y=TOTAL, colour=type)) + geom_line() +
xlab("Year") +
ylab("Total PM2.5 Emission (Tons)") +
ggtitle("Total Emission from PM2.5 in Baltimore City From Different Sources During the Year 1998-2008") +
scale_colour_discrete(name = "Emission \nSource Type")
source.with.encoding('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/Exploratory Data Analysis/Week 3/Plot3.R', encoding='UTF-8', echo=TRUE)
source.with.encoding('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/Exploratory Data Analysis/Week 3/Plot3.R', encoding='UTF-8', echo=TRUE)
source.with.encoding('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/Exploratory Data Analysis/Week 3/Plot3.R', encoding='UTF-8', echo=TRUE)
View(SCC)
View(SCC)
grep("/\bcoal/gi", SCC$EI.Sector, perl=TRUE, value=FALSE)
SCC$EI.Sector
grep("/\bCoal/", SCC$EI.Sector, perl=TRUE, value=FALSE)
grep("\bCoal", SCC$EI.Sector, perl=TRUE, value=FALSE)
grep("Coal+", SCC$EI.Sector, perl=TRUE, value=FALSE)
grep("Coal+", SCC$EI.Sector, perl=TRUE, value=TRUE)
table(grep("Coal+", SCC$EI.Sector, perl=TRUE, value=TRUE))
table(SCC$EI.Sector)
table(grep("Coal+", SCC$EI.Sector, perl=TRUE, value=TRUE))
table(grep("Coal+", SCC$EI.Sector, perl=TRUE, value=TRUE))
sccCoal = SCC[grep("Coal+", SCC$EI.Sector, perl=TRUE, value=FALSE),]
sccCoal$SCC
table(sccCoal$SCC)
grep("Coal+", SCC$EI.Sector, perl=TRUE, value=FALSE)
table(grep("Coal+", SCC$EI.Sector, perl=TRUE, value=FALSE))
str(grep("Coal+", SCC$EI.Sector, perl=TRUE, value=FALSE))
(grep("Coal+", SCC$EI.Sector, perl=TRUE, value=TRUE))
sccCoal = SCC[grep("Coal+", SCC$EI.Sector, perl=TRUE, value=FALSE),]
table(sccCoal$SCC~sccCoal$EI.Sector)
table(sccCoal$SCC)
str(sccCoal)
str(sccCoal)
gdf = NEI[which(NEI$SCC %in% sccCoal$SCC),]
table(gdf$SCC~sccCoal$SCC)
str(gdf$SCC)
str(sccCoal$SCC)
data.frame(lapply(sccCoal$SCC, as.character), stringsAsFactors=FALSE)
str(data.frame(lapply(sccCoal$SCC, as.character), stringsAsFactors=FALSE))
str(lapply(sccCoal$SCC, as.character))
table(gdf$SCC~lapply(sccCoal$SCC, as.character))
as.character(sccCoal$SCC)
str(as.character(sccCoal$SCC))
table(gdf$SCC~str(as.character(sccCoal$SCC)))
table(gdf$SCC~as.character(sccCoal$SCC))
k = as.character(sccCoal$SCC)
table(gdf$SCC~k)
table(k,gdf$SCC)
sccCoal = SCC[grep("Coal+", SCC$EI.Sector, perl=TRUE, value=FALSE),]
# Find emission of PM2.5 from coal sources that was recorded through out USA
gdf = NEI[which(NEI$SCC %in% sccCoal$SCC),]
# Group emissions by year produced by coal sources through out USA
gdf = ddply(gdf, c("type","year"), function(x) c(TOTAL=sum(x$Emissions)))
ggplot(gdf, aes(x=year, y=TOTAL)) + geom_line() +
xlab("Year") +
ylab("Total PM2.5 Emission (Tons)") +
ggtitle("Total Emission from PM2.5 Due to Coal Sources\n Through Out USA During the Year 1998-2008")
library(plyr)
library(ggplot2)
library(gridExtra)
ggplot(gdf, aes(x=year, y=TOTAL)) + geom_line() +
xlab("Year") +
ylab("Total PM2.5 Emission (Tons)") +
ggtitle("Total Emission from PM2.5 Due to Coal Sources\n Through Out USA During the Year 1998-2008")
gdf = ddply(gdf, c("year"), function(x) c(TOTAL=sum(x$Emissions)))
ggplot(gdf, aes(x=year, y=TOTAL)) + geom_line() +
xlab("Year") +
ylab("Total PM2.5 Emission (Tons)") +
ggtitle("Total Emission from PM2.5 Due to Coal Sources\n Through Out USA During the Year 1998-2008")
ggplot(gdf, aes(x=year, y=TOTAL)) + geom_line(color="red") +
xlab("Year") +
ylab("Total PM2.5 Emission (Tons)") +
ggtitle("Total Emission from PM2.5 Due to Coal Sources\n Through Out USA During the Year 1998-2008")
ggplot(gdf, aes(x=year, y=TOTAL)) + geom_line(color="red") +
xlab("Year") +
ylab("Total PM2.5 Emission (Tons)") +
ggtitle("Total Emission from PM2.5 Due to Coal Sources\n Through Out USA During the Year 1998-2008")+
geom_point(colour="red", size=4, shape=21, fill="white")
ggplot(gdf, aes(x=year, y=TOTAL, colour=type)) + geom_line() +
xlab("Year") +
ylab("Total PM2.5 Emission (Tons)") +
ggtitle("Total Emission from PM2.5 in Baltimore City \nFrom Different Sources During the Year 1998-2008") +
scale_colour_discrete(name = "Emission \nSource Type")+
geom_point(colour="red", size=4, shape=21, fill="white")
gdf = NEI[which(NEI$fips == "24510"),]
# For the city of Baltimore, group emissions by year across all sources and find the total emission for each of the years
gdf = ddply(gdf, c("type","year"), function(x) c(TOTAL=sum(x$Emissions)))
# Plot
ggplot(gdf, aes(x=year, y=TOTAL, colour=type)) + geom_line() +
xlab("Year") +
ylab("Total PM2.5 Emission (Tons)") +
ggtitle("Total Emission from PM2.5 in Baltimore City \nFrom Different Sources During the Year 1998-2008") +
scale_colour_discrete(name = "Emission \nSource Type")+
geom_point(colour="red", size=4, shape=21, fill="white")
# Find all coal sources
sccCoal = SCC[grep("Coal+", SCC$EI.Sector, perl=TRUE, value=FALSE),]
# Find emission of PM2.5 from coal sources that was recorded through out USA
gdf = NEI[which(NEI$SCC %in% sccCoal$SCC),]
# Group emissions by year produced by coal sources through out USA
gdf = ddply(gdf, c("year"), function(x) c(TOTAL=sum(x$Emissions)))
# Plot
ggplot(gdf, aes(x=year, y=TOTAL)) + geom_line(color="red") +
xlab("Year") +
ylab("Total PM2.5 Emission (Tons)") +
ggtitle("Total Emission from PM2.5 Due to Coal Sources\n Through Out USA During the Year 1998-2008")+
geom_point(colour="red", size=4, shape=21, fill="white")
source.with.encoding('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/Exploratory Data Analysis/Week 3/Plot3.R', encoding='UTF-8', echo=TRUE)
setwd("F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/Exploratory Data Analysis/Week 3")
source.with.encoding('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/Exploratory Data Analysis/Week 3/Plot3.R', encoding='UTF-8', echo=TRUE)
source.with.encoding('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/Exploratory Data Analysis/Week 3/Plot4.R', encoding='UTF-8', echo=TRUE)
View(SCC)
View(SCC)
grep("motor+", SCC$EI.Sector, perl=TRUE, value=FALSE)
grep("Motor+", SCC$EI.Sector, perl=TRUE, value=FALSE)
table(SCC$Data.Category)
SCC[where(SCC$Data.Category=="Biogenic"),]
SCC[where(SCC$Data.Category=="Biogenic"),]
SCC[which(SCC$Data.Category=="Biogenic"),]
SCC[which(SCC$Data.Category=="Onroad"),]
SCC[which(SCC$Data.Category=="noroad"),]
SCC[which(SCC$Data.Category=="non-road"),]
SCC[which(SCC$Data.Category=="nonroad"),]
table(SCC$Data.Category)
SCC[which(SCC$Data.Category=="Nonroad"),]
table(SCC$Data.Category)
# Find all motor vehicle emission sources
sccCoal = SCC[which(SCC$Data.Category=="Onroad"),]
# Find emission of PM2.5 from motor vehicle sources that was recorded through out USA
gdf = NEI[which(NEI$SCC %in% sccCoal$SCC),]
# Extract emission data for Baltimore City (fips == "24510")
gdf = gdf[which(gdf$fips == "24510"),]
# Group emissions by year produced by motor vehical sources in Baltimore City
gdf = ddply(gdf, c("year"), function(x) c(TOTAL=sum(x$Emissions)))
# Plot
ggplot(gdf, aes(x=year, y=TOTAL)) + geom_line(color="red") +
xlab("Year") +
ylab("Total PM2.5 Emission (Tons)") +
ggtitle("Total Emission from Motor Vehicle Sources\n in Balitmore City During the Year 1998-2008")+
geom_point(colour="red", size=4, shape=21, fill="white")
source.with.encoding('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/Exploratory Data Analysis/Week 3/Plot5.R', encoding='UTF-8', echo=TRUE)
# Find all motor vehicle emission sources
sccCoal = SCC[which(SCC$Data.Category=="Onroad"),]
# Find emission of PM2.5 from motor vehicle sources that was recorded through out USA
gdf = NEI[which(NEI$SCC %in% sccCoal$SCC),]
# Extract emission data for Baltimore City (fips == "24510") and Los Angeles County (fips == "06037")
gdf = gdf[which(gdf$fips == "24510" | gdf$fips == "06037"),]
# Group emissions by fips (Baltimore & Los Angeles) and year produced by motor vehical sources
gdf = ddply(gdf, c("fips","year"), function(x) c(TOTAL=sum(x$Emissions)))
# Plot
ggplot(gdf, aes(x=year, y=TOTAL, colour=fips)) + geom_line() +
xlab("Year") +
ylab("Total PM2.5 Emission (Tons)") +
ggtitle("Total Emission from Motor Vehicles in Baltimore City \n vs Los Angeles During the Year 1998-2008") +
scale_colour_discrete(name = "Emission \nSource Type")+
geom_point(colour="red", size=4, shape=21, fill="white")
# Find all motor vehicle emission sources
sccCoal = SCC[which(SCC$Data.Category=="Onroad"),]
# Find emission of PM2.5 from motor vehicle sources that was recorded through out USA
gdf = NEI[which(NEI$SCC %in% sccCoal$SCC),]
# Extract emission data for Baltimore City (fips == "24510") and Los Angeles County (fips == "06037")
gdf = gdf[which(gdf$fips == "24510" | gdf$fips == "06037"),]
# Assign proper names for 'fips'
gdf[which(gdf$fips == "24510"),]$fips = "Baltimore City"
gdf[which(gdf$fips == "06037"),]$fips = "Los Angeles County"
# Group emissions by fips (Baltimore & Los Angeles) and year produced by motor vehical sources
gdf = ddply(gdf, c("fips","year"), function(x) c(TOTAL=sum(x$Emissions)))
# Plot
ggplot(gdf, aes(x=year, y=TOTAL, colour=fips)) + geom_line() +
xlab("Year") +
ylab("Total PM2.5 Emission (Tons)") +
ggtitle("Total Emission from Motor Vehicles in Baltimore City \n vs Los Angeles County During the Year 1998-2008") +
scale_colour_discrete(name = "Emission \nSource Type")+
geom_point(colour="red", size=4, shape=21, fill="white")
source('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/Exploratory Data Analysis/Week 3/Plot6.R', echo=TRUE)
source.with.encoding('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/Exploratory Data Analysis/Week 3/Plot3.R', encoding='UTF-8', echo=TRUE)
source.with.encoding('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/Exploratory Data Analysis/Week 3/Plot4.R', encoding='UTF-8', echo=TRUE)
source.with.encoding('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/Exploratory Data Analysis/Week 3/Plot5.R', encoding='UTF-8', echo=TRUE)
source('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/Exploratory Data Analysis/Week 3/Plot6.R', echo=TRUE)
library(plyr)
library(ggplot2)
library(gridExtra)
setwd("F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/Exploratory Data Analysis/Week 4")
read.table("RD_501_88101_1999-0.txt", comment.char="#", header=FALSE, sep="|", na.strings="")
data = read.table("RD_501_88101_1999-0.txt", comment.char="#", header=FALSE, sep="|", na.strings="")
names(data)
cnames = readLines("RD_501_88101_1999-0.txt", 1)
cnames
cnames = strsplit(cnames, "|", fixed=TRUE)
cnames
cnames[[1]]
cnames[[1]]
names(data) = cnames[[1]]
head(data)
names(data) = make.names(cnames[[1]])
head(data)
x0 = data$Sample.Value
str(x0)
summary(x0)
mean(is.na(x0))
pm0 = read.table("RD_501_88101_1999-0.txt", comment.char="#", header=FALSE, sep="|", na.strings="")
cnames = readLines("RD_501_88101_1999-0.txt", 1)
cnames = strsplit(cnames, "|", fixed=TRUE)
names(pm0) = make.names(cnames[[1]])
x0 = pm0$Sample.Value
str(x0)
summary(x0)
mean(is.na(x0))
pm1 = read.table("RD_501_88101_2012-0.txt", comment.char="#", header=FALSE, sep="|", na.strings="")
x1 = pm0$Sample.Value
cnames = readLines("RD_501_88101_2012-0.txt", 1)
cnames = strsplit(cnames, "|", fixed=TRUE)
names(pm0) = make.names(cnames[[1]])
x1 = pm0$Sample.Value
str(x1)
summary(x1)
mean(is.na(x1))
names(pm1) = make.names(cnames[[1]])
x1 = pm1$Sample.Value
str(x1)
summary(x1)
mean(is.na(x1))
summary(x1)
summary(x0)
boxplot(x0,x1)
boxplot(log10(x0), log10(x1))
negative = x1<0
sum(negative, na.rm=TRUE)
date = pm1$Date
dates = pm1$Date
str(dates)
dates = as.Date(as.character(dates), "%Y%m%d")
str(dates)
hist(dates, "month")
dates[negative]
hist(dates[negative], "month")
site0 = unique(subset(pm0, State.Code=36, c(County.Code, Site.ID)))
site0 = unique(subset(pm0, State.Code==36, c(County.Code, Site.ID)))
site1 = unique(subset(pm1, State.Code==36, c(County.Code, Site.ID)))
site0 = paste(site0[,1], site0[,2], sep = ".")
site1 = paste(site1[,1], site1[,2], sep = ".")
str(site0)
str(site1)
both = intersect(site0, site1)
both
pm0$county.site = with(pm0, paste(County.Code, Site.ID, sep="."))
pm1$county.site = with(pm1, paste(County.Code, Site.ID, sep="."))
pm0$county.site
head(pm0$county.site, 2)
head(pm0, 2)
cnt0 = subset(pm0, State.Code == 36 & county.site %in% both)
cnt0 = subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 = subset(pm1, State.Code == 36 & county.site %in% both)
head(cnt0)
table(split(cnt0, cnt0$County.Site))
names(split(cnt0, cnt0$County.Site))
split(cnt0, cnt0$County.Site)
split(cnt0, cnt0$county.Site)
cnt0 = subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 = subset(pm1, State.Code == 36 & county.site %in% both)
cnt0
split(cnt0, cnt0$county.site)
sapply(split(cnt0, cnt0$county.site), nrow)
table(split(cnt0, cnt0$county.site))
table(split(cnt0, cnt0$county.site),cnt0$county.site)
sapply(split(cnt1, cnt1$county.site), nrow)
pm1sub = subset(pm1, State.Code == 36 & County.Code == 63 & Site.ID == 2008)
pm0sub = subset(pm0, State.Code == 36 & County.Code == 63 & Site.ID == 2008)
dates1 = pm1sub$Date
dates1 = pm1sub$Date
x1sub = pm1sub$Sample.Value
plot(dates1, x1sub)
dates1 = as.Date(as.character(pm1sub$Date), "%Y%m%d")
x1sub = pm1sub$Sample.Value
plot(dates1, x1sub)
dates0 = as.Date(as.character(pm0sub$Date), "%Y%m%d")
x0sub = pm0sub$Sample.Value
dates0 = as.Date(as.character(pm0sub$Date), "%Y%m%d")
x0sub = pm0sub$Sample.Value
plot(dates0, x0sub)
par(mfrow = c(1,1))
plot(dates1, x1sub)
abline(h=median(x1sub, na.rm=T))
plot(dates0, x0sub)
abline(h=median(x0sub, na.rm=T))
par(mfrow = c(1,1))
plot(dates1, x1sub)
abline(h=median(x1sub, na.rm=T))
plot(dates0, x0sub)
abline(h=median(x0sub, na.rm=T))
par(mfrow = c(1,2))
plot(dates1, x1sub)
abline(h=median(x1sub, na.rm=T))
plot(dates0, x0sub)
abline(h=median(x0sub, na.rm=T))
range(x0sub, x1sub, na.rm=T)
range(x0sub, x1sub, na.rm=T)
rng = range(x0sub, x1sub, na.rm=T)
par(mfrow = c(1,2))
plot(dates0, x0sub, pch=20, ylim=rng)
abline(h=median(x0sub, na.rm=T))
par(mfrow = c(1,2))
plot(dates0, x0sub, pch=20, ylim=rng)
abline(h=median(x0sub, na.rm=T))
plot(dates1, x1sub, pch=20, ylim=rng)
plot(dates1, x1sub, pch=20, ylim=rng)
abline(h=median(x1sub, na.rm=T))
par(mfrow = c(1,2))
plot(dates0, x0sub, pch=20, ylim=rng)
abline(h=median(x0sub, na.rm=T))
plot(dates1, x1sub, pch=20, ylim=rng)
abline(h=median(x1sub, na.rm=T))
mn0 = with(pm0, tapply(Sample.Value, State.Code, mean, na.rm=T))

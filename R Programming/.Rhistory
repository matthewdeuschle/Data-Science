View(result)
debugSource('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/R Programming/Week 4/rankhospital.R', echo=TRUE)
debugSource('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/R Programming/Week 4/rankhospital.R', echo=TRUE)
rankhospital("MD", "heart failure", 4)
debugSource('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/R Programming/Week 4/rankhospital.R', echo=TRUE)
View(result)
rankhospital("MD", "heart failure", 4)
View(result)
rankhospital("TX", "heart failure", 4)
debugSource('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/R Programming/Week 4/rankhospital.R', echo=TRUE)
View(result)
debugSource('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/R Programming/Week 4/rankhospital.R', echo=TRUE)
View(result)
outcomes = read.csv("outcome-of-care-measures.csv", colClasses="character")
outcomes[,22]
outcomes[,c(2,17)]
outcomes[,c(7,17)]
outcomes[which(outcomes$State=="MD"),c(7,17)]
k[order(outcomes$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)]
k = outcomes[which(outcomes$State=="MD"),c(7,17)]
k[order(outcomes$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)]
k[order(outcomes$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure),]
k = outcomes[which(outcomes$State=="MD"),c(7,17)]
k = outcomes[which(outcomes$State=="MD"),c(7,17)]
names(k)[2] = "y"
View(k)
k[order(y),]
k[order(k$y),]
k[,2] = as.numeric(k[,2])
k[order(k$y),]
k = outcomes[which(outcomes$State=="MD"),c(7,19)]
names(k)[2] = "y"
k[,2] = as.numeric(k[,2])
k[order(k$y),]
k = outcomes[which(outcomes$State=="MD"),c(7,20)]
names(k)[2] = "y"
k[,2] = as.numeric(k[,2])
k[order(k$y),]
k = outcomes[which(outcomes$State=="MD"),c(7,21)]
names(k)[2] = "y"
k[,2] = as.numeric(k[,2])
k[order(k$y),]
k = outcomes[which(outcomes$State=="MD"),c(7,17)]
k = outcomes[which(outcomes$State=="MD"),c(7,17)]
names(k)[2] = "y"
k[,2] = as.numeric(k[,2])
k[order(k$y),]
k = outcomes[which(outcomes$State=="MD"),c(2,7,17)]
names(k)[2] = "y"
k[,2] = as.numeric(k[,2])
k[order(k$y),]
k = outcomes[which(outcomes$State=="MD"),c(2,7,17)]
names(k)[3] = "y"
k[,3] = as.numeric(k[,3])
k[order(k$y),]
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
outcomes = read.csv("outcome-of-care-measures.csv", colClasses="character")
k = outcomes[which(outcomes$State=="MD"),c(2,7,17)]
names(k)[3] = "y"
k[,3] = as.numeric(k[,3])
k[order(k$y),]
outcomes = read.csv("outcome-of-care-measures.csv", colClasses="character")
k = outcomes[which(outcomes$State=="TX"),c(2,7,17)]
names(k)[3] = "y"
k[,3] = as.numeric(k[,3])
k[order(k$y),]
debugSource('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/R Programming/Week 4/rankhospital.R', echo=TRUE)
View(result)
debugSource('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/R Programming/Week 4/rankhospital.R', echo=TRUE)
View(result)
rankhospital("TX", "heart failure", 4)
debugSource('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/R Programming/Week 4/rankhospital.R', echo=TRUE)
View(result)
debugSource('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/R Programming/Week 4/rankhospital.R', echo=TRUE)
debugSource('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/R Programming/Week 4/rankhospital.R', echo=TRUE)
debugSource('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/R Programming/Week 4/rankhospital.R', echo=TRUE)
debugSource('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/R Programming/Week 4/rankhospital.R', echo=TRUE)
rankhospital("TX", "heart failure", 4)
rankhospital("TX", "heart attack", "worst")
rankhospital("MD", "heart attack", "worst")
# Task 3
#dir = paste(getwd(),"/Week 4", sep="")
#setwd(dir)
#getwd()
rankhospital = function(state, outcome, num)
{
## Read outcome data
outcomes = read.csv("outcome-of-care-measures.csv", colClasses="character")
## Distinct state values
states = unique(outcomes$State)
## Give shorter names for column 11, 17 & 23
names(outcomes)[11] = "low30HT"   # col - Hospital 30-Day Death (Mortality) Rates from Heart Attack: Lists the risk adjusted rate (percentage) for each hospital
names(outcomes)[17] = "low30HF"   # col - Hospital 30-Day Death (Mortality) Rates from Heart Failure: Lists the risk adjusted rate (percentage) for each hospital
names(outcomes)[23] = "low30PN"   # col - Hospital 30-Day Death (Mortality) Rates from Pneumonia: Lists the risk adjusted rate (percentage) for each hospital
## 3 outcomes
outcomeValues = c("heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
if (missing(state))
stop("Need to specify a state.")
if (missing(outcome))
stop("Need to specify an outcome")
if(!is.element(state, states))
stop("invalid state")
if(!is.element(outcome, outcomeValues))
stop("invalid outcome")
# Find those hospitals with ranking - 'num' for the lowest 30-day mortality for 'heart attack'
if(outcome == outcomeValues[1])
{
result = outcomes[which(outcomes$low30HT != "Not Available" & outcomes$State == state), c(2,7,11)]
result[,3] = as.numeric(result[,3])
result = result[order(result$low30HT), ]
if(num == "best")
{
nLowestValue = result[1,3]
}
else
{
if(num == "worst")
{
nLowestValue = result[dim(result)[1],3]
}
else
{
if(!is.numeric(num))
{
stop("NA")
}
else
{
if(as.numeric(num) > dim(result)[1])
{
return("NA")
}
else
{
nLowestValue = result[num,3]
}
}
}
}
if(dim(result[which(result$low30HT == nLowestValue),])[1] > 1)
{
result = result[which(result$low30HT == nLowestValue),]
return(result[with(result, order(result$Hospital.Name, decreasing=TRUE)),][1,1])
}
else
{
return (result[1,1])
}
}
# Find those hospitals with ranking - 'num' for the lowest 30-day mortality for 'heart failure'
if(outcome == outcomeValues[2])
{
result = outcomes[which(outcomes$low30HF != "Not Available" & outcomes$State == state), c(2,7,17)]
result[,3] = as.numeric(result[,3])
result = result[order(result$low30HF), ]
if(num == "best")
{
nLowestValue = result[1,3]
}
else
{
if(num == "worst")
{
nLowestValue = result[dim(result)[1],3]
}
else
{
if(!is.numeric(num))
{
stop("NA")
}
else
{
if(as.numeric(num) > dim(result)[1])
{
return("NA")
}
else
{
nLowestValue = result[num,3]
}
}
}
}
if(dim(result[which(result$low30HF == nLowestValue),])[1] > 1)
{
result = result[which(result$low30HF == nLowestValue),]
return(result[with(result, order(result$Hospital.Name, decreasing=TRUE)),][1,1])
}
else
{
return (result[1,1])
}
}
#  Find those hospitals with ranking - 'num' for lowest 30-day mortality for 'Pneumonia'
if(outcome == outcomeValues[3])
{
result = outcomes[which(outcomes$low30PN != "Not Available" & outcomes$State == state), c(2,7,23)]
result[,3] = as.numeric(result[,3])
result = result[order(result$low30PN), ]
if(num == "best")
{
nLowestValue = result[1,3]
}
else
{
if(num == "worst")
{
nLowestValue = result[dim(result)[1],3]
}
else
{
if(!is.numeric(num))
{
stop("NA")
}
else
{
if(as.numeric(num) > dim(result)[1])
{
return("NA")
}
else
{
nLowestValue = result[num,3]
}
}
}
}
if(dim(result[which(result$low30PN == nLowestValue),])[1] > 1)
{
result = result[which(result$low30PN == lnLowestValue),]
return(result[with(result, order(result$Hospital.Name, decreasing=TRUE)),][1,1])
}
else
{
return (result[1,1])
}
}
}
rankhospital("MD", "heart attack", "worst")
rankhospital("TX", "heart failure", 4)
debugSource('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/R Programming/Week 4/rankhospital.R', echo=TRUE)
View(result)
source('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/R Programming/Week 4/rankhospital.R', echo=TRUE)
debugSource('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/R Programming/Week 4/rankhospital.R', echo=TRUE)
debugSource('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/R Programming/Week 4/rankhospital.R', echo=TRUE)
debugSource('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/R Programming/Week 4/rankhospital.R', echo=TRUE)
debugSource('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/R Programming/Week 4/rankhospital.R', echo=TRUE)
debugSource('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/R Programming/Week 4/rankhospital.R', echo=TRUE)
debugSource('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/R Programming/Week 4/rankhospital.R', echo=TRUE)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
submit()
x = list(a=matrix(1:4,2,2), b=matrix(1:6,3,2))
x
lapply(x, function(elt)
{
elt[,1]
})
x = matrix(rnorm(200), 20, 10)
x
apply(x, 2, mean)  # 2 means, eliminate all rows and leave the columns
apply(x, 1, sum)  # 1 means, eliminate all columns and leave the row
?ddply
library(plyr)
?ddply
debugSource('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/R Programming/Week 4/rankall.R', echo=TRUE)
View(result)
debugSource('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/R Programming/Week 4/rankall.R', echo=TRUE)
View(result)
View(result)
debugSource('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/R Programming/Week 4/rankall.R', echo=TRUE)
debugSource('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/R Programming/Week 4/rankall.R', echo=TRUE)
debugSource('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/R Programming/Week 4/rankall.R', echo=TRUE)
debugSource('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/R Programming/Week 4/rankall.R', echo=TRUE)
debugSource('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/R Programming/Week 4/rankall.R', echo=TRUE)
source('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/R Programming/Week 4/rankall.R', echo=TRUE)
source('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/R Programming/Week 4/rankall.R', echo=TRUE)
source('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/R Programming/Week 4/rankall.R', echo=TRUE)
source('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/R Programming/Week 4/rankall.R', echo=TRUE)
debugSource('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/R Programming/Week 4/rankall.R', echo=TRUE)
debugSource('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/R Programming/Week 4/rankall.R', echo=TRUE)
debugSource('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/R Programming/Week 4/rankall.R', echo=TRUE)
debugSource('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/R Programming/Week 4/rankall.R', echo=TRUE)
debugSource('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/R Programming/Week 4/rankall.R', echo=TRUE)
debugSource('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/R Programming/Week 4/rankall.R', echo=TRUE)
debugSource('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/R Programming/Week 4/rankall.R', echo=TRUE)
View(result)
View(newRow)
debugSource('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/R Programming/Week 4/rankall.R', echo=TRUE)
View(newRow)
View(newRow)
debugSource('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/R Programming/Week 4/rankall.R', echo=TRUE)
debugSource('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/R Programming/Week 4/rankall.R', echo=TRUE)
View(newRow)
View(newRow)
View(output)
View(output)
rankall("heart attack", 20)
names(states)
debugSource('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/R Programming/Week 4/rankall.R', echo=TRUE)
debugSource('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/R Programming/Week 4/rankall.R', echo=TRUE)
debugSource('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/R Programming/Week 4/rankall.R', echo=TRUE)
View(result)
View(newRow)
View(newRow)
debugSource('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/R Programming/Week 4/rankall.R', echo=TRUE)
View(newRow)
View(result)
debugSource('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/R Programming/Week 4/rankall.R', echo=TRUE)
View(result)
View(newRow)
rankall("heart attack", 20)
debugSource('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/R Programming/Week 4/rankall.R', echo=TRUE)
debugSource('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/R Programming/Week 4/rankall.R', echo=TRUE)
debugSource('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/R Programming/Week 4/rankall.R', echo=TRUE)
View(output)
View(output)
debugSource('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/R Programming/Week 4/rankall.R', echo=TRUE)
rankall("heart attack", 20)
debugSource('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/R Programming/Week 4/rankall.R', echo=TRUE)
View(result)
View(data)
debugSource('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/R Programming/Week 4/rankall.R', echo=TRUE)
View(data)
View(newRow)
rankall("heart attack", 20)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
9
submit()
submit()
submit()
rankall("heart attack", 20)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("pneumonia", "worst"), 3)
rankall = function(outcome, num="best")
{
## Load library
library(plyr)
## Read outcome data
outcomes = read.csv("outcome-of-care-measures.csv", colClasses="character")
## Give shorter names for column 11, 17 & 23
names(outcomes)[11] = "low30HT"   # col - Hospital 30-Day Death (Mortality) Rates from Heart Attack: Lists the risk adjusted rate (percentage) for each hospital
names(outcomes)[17] = "low30HF"   # col - Hospital 30-Day Death (Mortality) Rates from Heart Failure: Lists the risk adjusted rate (percentage) for each hospital
names(outcomes)[23] = "low30PN"   # col - Hospital 30-Day Death (Mortality) Rates from Pneumonia: Lists the risk adjusted rate (percentage) for each hospital
## Distinct state values
states = sort(unique(outcomes$State))
## 3 outcomes
outcomeValues = c("heart attack", "heart failure", "pneumonia")
if (missing(outcome))
stop("invalid outcome")
# Find those hospitals with ranking - 'num' for the 30-day mortality for 'heart attack'
if(outcome == outcomeValues[1])
{
result = outcomes[which(outcomes$low30HT != "Not Available"), c(2,7,11)]
result[,3] = as.numeric(result[,3])
result = result[order(result$low30HT), ]
# data frame to hold values
output = data.frame(hospital=character(0), state=character(0))
# Group the data by states
result = ddply(result, c("State"))
# Loop through each state and find the hospital that matches the
# nLowestValue ranking
for(n in 1:length(states))
{
nLowestValue = inStateRank(result[which(result$State == states[n]),], num)
#print(nLowestValue)
#print(states[n])
if(dim(result[which(result$low30HT == nLowestValue & result$State == states[n]),])[1] <= 0)
{
newRow = data.frame(hospital="NA", state=states[n])
output = rbind(output, newRow)
}
else
{
if(dim(result[which(result$low30HT == nLowestValue & result$State == states[n]),])[1] > 1)
{
data = result[which(result$low30HT == nLowestValue & result$State == states[n]),]
newRow = data.frame(hospital=data[with(data, order(data$Hospital.Name, decreasing=FALSE)),][1,1], state=states[n])
output = rbind(output, newRow)
}
else
{
newRow = data.frame(hospital=result[which(result$low30HT == nLowestValue & result$State == states[n]),1], state=states[n])
output = rbind(output, newRow)
}
}
}
}
# Find those hospitals with ranking - 'num' for the 30-day mortality for 'heart failure'
if(outcome == outcomeValues[2])
{
result = outcomes[which(outcomes$low30HF != "Not Available"), c(2,7,17)]
result[,3] = as.numeric(result[,3])
result = result[order(result$low30HF), ]
# data frame to hold values
output = data.frame(hospital=character(0), state=character(0))
# Group the data by states
result = ddply(result, c("State"))
# Loop through each state and find the hospital that matches the
# nLowestValue ranking
for(n in 1:length(states))
{
nLowestValue = inStateRank(result[which(result$State == states[n]),], num)
#print(nLowestValue)
#print(states[n])
if(dim(result[which(result$low30HF == nLowestValue & result$State == states[n]),])[1] <= 0)
{
newRow = data.frame(hospital="NA", state=states[n])
output = rbind(output, newRow)
}
else
{
if(dim(result[which(result$low30HF == nLowestValue & result$State == states[n]),])[1] > 1)
{
data = result[which(result$low30HF == nLowestValue & result$State == states[n]),]
newRow = data.frame(hospital=data[with(data, order(data$Hospital.Name, decreasing=FALSE)),][1,1], state=states[n])
output = rbind(output, newRow)
}
else
{
newRow = data.frame(hospital=result[which(result$low30HF == nLowestValue & result$State == states[n]),1], state=states[n])
output = rbind(output, newRow)
}
}
}
# Find those hospitals with ranking - 'num' for the 30-day mortality for 'Pneumonia'
if(outcome == outcomeValues[3])
{
result = outcomes[which(outcomes$low30PN != "Not Available"), c(2,7,23)]
result[,3] = as.numeric(result[,3])
result = result[order(result$low30PN), ]
# data frame to hold values
output = data.frame(hospital=character(0), state=character(0))
# Group the data by states
result = ddply(result, c("State"))
# Loop through each state and find the hospital that matches the
# nLowestValue ranking
for(n in 1:length(states))
{
nLowestValue = inStateRank(result[which(result$State == states[n]),], num)
#print(nLowestValue)
#print(states[n])
if(dim(result[which(result$low30PN == nLowestValue & result$State == states[n]),])[1] <= 0)
{
newRow = data.frame(hospital="NA", state=states[n])
output = rbind(output, newRow)
}
else
{
if(dim(result[which(result$low30PN == nLowestValue & result$State == states[n]),])[1] > 1)
{
data = result[which(result$low30PN == nLowestValue & result$State == states[n]),]
newRow = data.frame(hospital=data[with(data, order(data$Hospital.Name, decreasing=FALSE)),][1,1], state=states[n])
output = rbind(output, newRow)
}
else
{
newRow = data.frame(hospital=result[which(result$low30PN == nLowestValue & result$State == states[n]),1], state=states[n])
output = rbind(output, newRow)
}
}
}
return(output)
}
# Function that finds the rank that matches the given 'num' for the given state data
inStateRank = function(stateOutcome, num="best")
{
if(num == "best")
{
return(stateOutcome[1,3])
}
else
{
if(num == "worst")
{
return(stateOutcome[dim(stateOutcome)[1],3])
}
else
{
if(!is.numeric(num))
{
stop("NA")
}
else
{
if(as.numeric(num) > dim(stateOutcome)[1])
{
return(-1)
}
else
{
# return ranking that matches the given value of num
return(stateOutcome[num,3])
}
}
}
}
}
source('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/R Programming/Week 4/rankall.R', echo=TRUE)
source('F:/My Development/My Testing Ground/Data Science/Data Science Cert - Code/R Programming/Week 4/rankall.R', echo=TRUE)
submit()
submit()
submit()

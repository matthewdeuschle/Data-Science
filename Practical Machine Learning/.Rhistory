library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
df = training[,grep("^IL", colnames(training))]
training[,grep("^IL", colnames(training))]
lens(training[,grep("^IL", colnames(training))])
length(training[,grep("^IL", colnames(training))])
names(training)
names(adData)
names(training)
training[1]
training[0]
table(training[1])
df = cbind(training[1],training[,grep("^IL", colnames(training))])
dim(df)
confusionMatrix(trainingIL$diagnosis,predict(modelFit,trainPC))
trainingIL = cbind(training[1],training[,grep("^IL", colnames(training))])
preProc = preProcess(trainingIL[,-13],method="pca",thresh=0.80)
trainingIL = cbind(training[,grep("^IL", colnames(training))],training[1])
preProc = preProcess(trainingIL[,-13],method="pca",thresh=0.80)
trainPC = predict(preProc,trainingIL[,-13])
modelFit = train(trainingIL$diagnosis ~ .,method="glm",data=trainPC, threa)
modelFit = train(trainingIL$diagnosis ~ .,method="glm",data=trainPC)
confusionMatrix(trainingIL$diagnosis,predict(modelFit,trainPC))
summary(modelFit$finalModel)
names(testing)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
#~~ non pca
trainModelFit = train(training$diagnosis ~ .,method="glm",preProcess="pca",data=training)
confusionMatrix(testing$diagnosis,predict(trainModelFit,testing))
trainingIL = cbind(training[,grep("^IL", colnames(training))],training[1])
trainModelFit = train(trainingIL$diagnosis ~ .,method="glm",preProcess="pca",data=trainingIL)
confusionMatrix(testing$diagnosis,predict(trainModelFit,testing))
trainingIL = cbind(training[,grep("^IL", colnames(training))],training[1])
trainModelFit = train(trainingIL$diagnosis ~ .,method="glm",preProcess="pca",data=trainingIL, thresh=0.80)
trainingIL = cbind(training[,grep("^IL", colnames(training))],training[1])
preProc = preProcess(trainingIL[,-13],method="pca",thresh=0.80)
trainPC = predict(preProc,trainingIL[,-13])
modelFit = train(trainingIL$diagnosis ~ .,method="glm",data=trainPC)
confusionMatrix(testing$diagnosis,predict(modelFit,testing))
names(testing)
trainingIL = cbind(training[1],training[,grep("^IL", colnames(training))])
preProc = preProcess(trainingIL[,2:13],method="pca",thresh=0.80)
trainPC = predict(preProc,trainingIL[,2:13])
modelFit = train(trainingIL$diagnosis ~ .,method="glm",data=trainPC)
trainingIL = cbind(training[,grep("^IL", colnames(training))],training[1])
testingIL = cbind(testing[,grep("^IL", colnames(testing))],testing[1])
trainingIL = cbind(training[,grep("^IL", colnames(training))],training[1])
testingIL = cbind(testing[,grep("^IL", colnames(testing))],testing[1])
preProc = preProcess(trainingIL[,-13],method="pca",thresh=0.80)
trainPC = predict(preProc,trainingIL[,-13])
modelFit = train(trainingIL$diagnosis ~ .,method="glm",data=trainPC)
testPC <- predict(preProc,testingIL[,-13])
confusionMatrix(testingIL$diagnosis,predict(modelFit,testPC))
trainModelFit = train(trainingIL$diagnosis ~ .,method="glm",preProcess="pca",data=trainingIL)
confusionMatrix(testingIL$diagnosis,predict(trainModelFit,testingIL))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainingIL = cbind(training[,grep("^IL", colnames(training))],training[1])
testingIL = cbind(testing[,grep("^IL", colnames(testing))],testing[1])
#~~ non pca
trainModelFit = train(trainingIL$diagnosis ~ .,method="glm",preProcess="pca",data=trainingIL)
confusionMatrix(testingIL$diagnosis,predict(trainModelFit,testingIL))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainingIL = cbind(training[,grep("^IL", colnames(training))],training[1])
testingIL = cbind(testing[,grep("^IL", colnames(testing))],testing[1])
preProc = preProcess(trainingIL[,-13],method="pca",thresh=0.80)
trainPC = predict(preProc,trainingIL[,-13])
testPC <- predict(preProc,testingIL[,-13])
PCFit = train(trainingIL$diagnosis ~ .,method="glm",data=trainPC)
NoPCFit = train(trainingIL$diagnosis ~ .,method="glm",data=trainingIL)
confusionMatrix(testingIL$diagnosis,predict(PCFit,testPC))
confusionMatrix(testingIL$diagnosis,predict(NoPCFit,testingIL))
library(Hmisc)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
group = cut2(training$FlyAsh, g=3)
plot(training$CompressiveStrength, col=group)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(scales)
sp10 = ggplot(training, aes(x=Superplasticizer)) + geom_histogram(binwidth=.0001)
sp10 + scale_y_continuous(trans = log2_trans())
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainingIL = cbind(training[,grep("^IL", colnames(training))],training[1])
preProc = preProcess(trainingIL[,-13],method="pca",thresh=0.90)
trainPC = predict(preProc,trainingIL[,-13])
modelFit = train(trainingIL$diagnosis ~ .,method="glm",data=trainPC)
summary(modelFit$finalModel)
library("AppliedPredictiveModeling", lib.loc="~/R/win-library/3.1")
segmentationOriginal
segmentationOriginal
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
segmentationOriginal
names(segmentationOriginal)
df = segmentationOriginal
inTrain <- createDataPartition(y=df$Case,p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
df = segmentationOriginal
inTrain <- createDataPartition(y=df$Case,p=0.75, list=FALSE)
training <- df[inTrain,]
testing <- df[-inTrain,]
set.seed(32323)
modFit <- train(Case ~ .,method="rpart",data=training)
print(modFit$finalModel)
testing <- df[-inTrain,]
set.seed(125)
modFit <- train(Case ~ .,method="rpart",data=training)
print(modFit$finalModel)
predict(modFit,newdata=testing)
df$Case
modFit <- rpart(Case ~ .,method="class",data=training)
modFit
vowel.train
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
library(ElemStatLearn)
data(vowel.train)
install.packages("ElemStatLearn")
data(vowel.test)
vowel.train
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.test
names(vowel.test)
tr = vowel.test
tr$y = as.factor(tr$y)
te = vowel.test
te$y = as.factor(te$y)
?varimp
?varImp
varImp (modFit, useModel=TRUE)
modFit <- train(y~ .,data=tr,method="rf",prox=TRUE)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
tr = vowel.train
tr$y = as.factor(tr$y)
te = vowel.test
te$y = as.factor(te$y)
set.seed(33833)
modFit <- train(y~ .,data=tr,method="rf",prox=TRUE)
varImp (modFit, useModel=TRUE)
